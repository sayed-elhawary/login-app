// Dashboard.js
import React, { useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';

export default function Dashboard() {
  const [username, setUsername] = useState('');
  const [products, setProducts] = useState([]);
  const [cart, setCart] = useState(() => {
    const savedCart = localStorage.getItem('cart');
    return savedCart ? JSON.parse(savedCart) : [];
  });
  const [checkoutMsg, setCheckoutMsg] = useState('');
  const navigate = useNavigate();

  const API_URL = process.env.REACT_APP_API_URL;

  const logout = () => {
    localStorage.removeItem('token');
    localStorage.removeItem('username');
    localStorage.removeItem('cart');
    navigate('/login');
  };

  useEffect(() => {
    const storedUsername = localStorage.getItem('username');
    const token = localStorage.getItem('token');

    if (!storedUsername || !token) {
      navigate('/login');
      return;
    }

    setUsername(storedUsername);

    axios.get(`${API_URL}/products`, {
      headers: { 'x-auth-token': token },
    })
    .then((res) => setProducts(res.data.products))
    .catch((err) => {
      console.error(err);
      if (err.response?.status === 401) logout();
    });
  }, [navigate, API_URL]);

  const addToCart = (product) => {
    setCart((prevCart) => {
      const existing = prevCart.find((item) => item._id === product._id);
      let updatedCart;

      if (existing) {
        updatedCart = prevCart.map((item) =>
          item._id === product._id ? { ...item, quantity: item.quantity + 1 } : item
        );
      } else {
        updatedCart = [...prevCart, { ...product, quantity: 1 }];
      }

      localStorage.setItem('cart', JSON.stringify(updatedCart));
      return updatedCart;
    });
  };

  const removeFromCart = (productId) => {
    setCart((prevCart) => {
      const updatedCart = prevCart.filter((item) => item._id !== productId);
      localStorage.setItem('cart', JSON.stringify(updatedCart));
      return updatedCart;
    });
  };

  const updateQuantity = (productId, quantity) => {
    if (quantity < 1) return;
    setCart((prevCart) => {
      const updatedCart = prevCart.map((item) =>
        item._id === productId ? { ...item, quantity } : item
      );
      localStorage.setItem('cart', JSON.stringify(updatedCart));
      return updatedCart;
    });
  };

  const totalPrice = cart.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleCheckout = () => {
    const token = localStorage.getItem('token');

    if (!token) {
      setCheckoutMsg('You must be logged in to checkout.');
      return;
    }

    if (cart.length === 0) {
      setCheckoutMsg('Your cart is empty.');
      return;
    }

    const orderData = {
      products: cart.map((item) => ({
        productId: item._id,
        quantity: item.quantity,
      })),
      total: totalPrice,
      username,
    };

    axios.post(`${API_URL}/orders`, orderData, {
      headers: { 'x-auth-token': token },
    })
    .then(() => {
      setCheckoutMsg('Order placed successfully! ðŸŽ‰');
      setCart([]);
      localStorage.removeItem('cart');
    })
    .catch((err) => {
      console.error(err);
      setCheckoutMsg('Failed to place order. Please try again.');
    });
  };

  return (
    <div className="dashboard">
      <header className="header">
        <div>
          <h1>My Cool Store</h1>
          <p className="welcome">Hello, <strong>{username}!</strong> Enjoy shopping ðŸ˜Š</p>
        </div>
        <button className="logout-btn" onClick={logout}>Logout</button>
      </header>

      <div className="products-container">
        {products.map((product) => (
          <div key={product._id} className="product-card">
            <img 
              src={product.image || 'https://via.placeholder.com/250x200?text=No+Image'} 
              alt={product.name} 
              className="product-image"
            />
            <div className="product-info">
              <h3 className="product-title">{product.name}</h3>
              <p className="product-desc">{product.description || 'Premium quality product'}</p>
              <div className="product-price">${product.price.toFixed(2)}</div>
              <button className="add-to-cart" onClick={() => addToCart(product)}>
                Add to Cart
              </button>
            </div>
          </div>
        ))}
      </div>

      <div className="cart-section">
        <h2>Your Shopping Cart</h2>
        {cart.length === 0 ? (
          <p className="empty-cart">Your cart is empty</p>
        ) : (
          <div className="cart-items">
            {cart.map((item) => (
              <div key={item._id} className="cart-item">
                <img 
                  src={item.image || 'https://via.placeholder.com/70x70?text=No+Image'} 
                  alt={item.name}
                />
                <div className="item-details">
                  <h4>{item.name}</h4>
                  <p>${item.price.toFixed(2)}</p>
                </div>
                <div className="item-controls">
                  <input
                    type="number"
                    min="1"
                    value={item.quantity}
                    onChange={(e) => updateQuantity(item._id, parseInt(e.target.value))}
                  />
                  <button 
                    className="remove-btn"
                    onClick={() => removeFromCart(item._id)}
                  >
                    Remove
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
        
        <div className="cart-summary">
          <h3>Total: ${totalPrice.toFixed(2)}</h3>
          <button 
            className="checkout-btn"
            onClick={handleCheckout}
            disabled={cart.length === 0}
          >
            Proceed to Checkout
          </button>
          {checkoutMsg && <p className="checkout-msg">{checkoutMsg}</p>}
        </div>
      </div>

      <style jsx>{`
        .dashboard {
          max-width: 1200px;
          margin: 0 auto;
          padding: 20px;
          font-family: 'Arial', sans-serif;
        }
        
        .header {
          display: flex;
          justify-content: space-between;
          align-items: center;
          background-color: #4CAF50;
          color: white;
          padding: 20px;
          border-radius: 8px;
          margin-bottom: 30px;
        }
        
        .header h1 {
          margin: 0;
          font-size: 2rem;
        }
        
        .welcome {
          margin: 5px 0 0;
          font-size: 1.1rem;
        }
        
        .logout-btn {
          background: white;
          color: #4CAF50;
          border: none;
          padding: 10px 20px;
          border-radius: 20px;
          font-weight: bold;
          cursor: pointer;
          transition: all 0.3s;
        }
        
        .logout-btn:hover {
          background: #f0f0f0;
          transform: translateY(-2px);
        }
        
        .products-container {
          display: grid;
          grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
          gap: 25px;
          margin-bottom: 40px;
        }
        
        .product-card {
          background: white;
          border-radius: 10px;
          overflow: hidden;
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
          transition: transform 0.3s, box-shadow 0.3s;
        }
        
        .product-card:hover {
          transform: translateY(-5px);
          box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
        
        .product-image {
          width: 100%;
          height: 200px;
          object-fit: contain;
          background: #f5f5f5;
        }
        
        .product-info {
          padding: 15px;
        }
        
        .product-title {
          margin: 0 0 10px;
          color: #333;
          font-size: 1.2rem;
        }
        
        .product-desc {
          margin: 0 0 15px;
          color: #666;
          font-size: 0.9rem;
        }
        
        .product-price {
          font-weight: bold;
          font-size: 1.3rem;
          color: #4CAF50;
          margin: 0 0 15px;
        }
        
        .add-to-cart {
          width: 100%;
          background: #4CAF50;
          color: white;
          border: none;
          padding: 10px;
          border-radius: 5px;
          font-weight: bold;
          cursor: pointer;
          transition: background 0.3s;
        }
        
        .add-to-cart:hover {
          background: #45a049;
        }
        
        .cart-section {
          background: white;
          padding: 20px;
          border-radius: 10px;
          box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .cart-section h2 {
          margin-top: 0;
          color: #333;
          border-bottom: 1px solid #eee;
          padding-bottom: 10px;
        }
        
        .empty-cart {
          text-align: center;
          color: #666;
          font-style: italic;
        }
        
        .cart-items {
          margin-bottom: 20px;
        }
        
        .cart-item {
          display: flex;
          align-items: center;
          padding: 15px 0;
          border-bottom: 1px solid #eee;
        }
        
        .cart-item img {
          width: 70px;
          height: 70px;
          object-fit: contain;
          margin-right: 15px;
          background: #f5f5f5;
          border-radius: 5px;
        }
        
        .item-details {
          flex: 1;
        }
        
        .item-details h4 {
          margin: 0 0 5px;
          color: #333;
        }
        
        .item-details p {
          margin: 0;
          color: #4CAF50;
          font-weight: bold;
        }
        
        .item-controls {
          display: flex;
          align-items: center;
        }
        
        .item-controls input {
          width: 50px;
          padding: 8px;
          margin-right: 10px;
          border: 1px solid #ddd;
          border-radius: 4px;
          text-align: center;
        }
        
        .remove-btn {
          background: #ff4444;
          color: white;
          border: none;
          padding: 8px 15px;
          border-radius: 4px;
          cursor: pointer;
          transition: background 0.3s;
        }
        
        .remove-btn:hover {
          background: #cc0000;
        }
        
        .cart-summary {
          text-align: right;
          padding-top: 20px;
          border-top: 1px solid #eee;
        }
        
        .cart-summary h3 {
          margin: 0 0 15px;
          color: #333;
        }
        
        .checkout-btn {
          background: #4CAF50;
          color: white;
          border: none;
          padding: 12px 25px;
          border-radius: 5px;
          font-weight: bold;
          cursor: pointer;
          transition: background 0.3s;
        }
        
        .checkout-btn:hover:not(:disabled) {
          background: #45a049;
        }
        
        .checkout-btn:disabled {
          background: #cccccc;
          cursor: not-allowed;
        }
        
        .checkout-msg {
          margin-top: 15px;
          color: #4CAF50;
          font-weight: bold;
          text-align: center;
        }
      `}</style>
    </div>
  );
}
