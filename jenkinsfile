pipeline {
  agent any

  tools {
    nodejs 'NodeJS_20'
  }

  environment {
    DOCKER_REGISTRY = "sayedkhaledelhawary"
    FRONTEND_IMAGE = "${DOCKER_REGISTRY}/login-react"
    BACKEND_IMAGE = "${DOCKER_REGISTRY}/login-server"
    SONARQUBE_ENV = "sonarqube"
    NAMESPACE = "default"
    GIT_REPO = 'https://github.com/sayed-elhawary/login-app.git'
  }
    triggers {
        pollSCM('* * * * *')
    }
  stages {
    stage('Clone Git Repo') {
      steps {
        git url: "${GIT_REPO}", branch: 'main'
      }
    }

    stage('SonarQube Analysis') {
      steps {
        withSonarQubeEnv("${SONARQUBE_ENV}") {
          sh 'sonar-scanner'
        }
      }
    }

    stage('Build Docker Images') {
      steps {
        sh "docker build -t ${FRONTEND_IMAGE} ./frontend"
        sh "docker build -t ${BACKEND_IMAGE} ./backend"
      }
    }

    stage('Push to Registry') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker-creds', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh '''
            set -e
            echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
            docker push ${FRONTEND_IMAGE}
            docker push ${BACKEND_IMAGE}
            docker logout
          '''
        }
      }
    }

    stage('Deploy Monitoring (Helm)') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE'), string(credentialsId: 'grafana-admin-password', variable: 'GRAFANA_ADMIN_PASSWORD')]) {
          sh '''
            export KUBECONFIG=$KUBECONFIG_FILE

            helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
            helm repo add grafana https://grafana.github.io/helm-charts || true
            helm repo update

          
            kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -

       
            helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack \
              --namespace monitoring \
              --set prometheus.service.type=NodePort \
              --set prometheus.service.nodePort=32100 \
              --set alertmanager.service.type=NodePort \
              --set alertmanager.service.nodePort=32101 \
              --set grafana.service.type=NodePort \
              --set grafana.service.nodePort=32102 \
              --set grafana.adminPassword=$GRAFANA_ADMIN_PASSWORD \
              --set prometheus.prometheusSpec.maximumStartupDurationSeconds=120
          '''
        }
      }
    }

    stage('Deploy Application (kubectl)') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG_FILE')]) {
          script {
            sh '''
              export KUBECONFIG=$KUBECONFIG_FILE

           
              frontendExists=$(kubectl get deployment frontend-deployment -n ${NAMESPACE} --ignore-not-found)
              backendExists=$(kubectl get deployment backend-deployment -n ${NAMESPACE} --ignore-not-found)

         ts
              if [ -z "$frontendExists" ] || [ -z "$backendExists" ]; then
                kubectl apply -f k8s/monitoring/ -n monitoring
                kubectl apply -f k8s/ -n ${NAMESPACE}
              fi

            
              kubectl set image deployment/frontend-deployment frontend=${FRONTEND_IMAGE} -n ${NAMESPACE} || true
              kubectl rollout status deployment/frontend-deployment -n ${NAMESPACE}
              kubectl set image deployment/backend-deployment backend=${BACKEND_IMAGE} -n ${NAMESPACE} || true
              kubectl rollout restart deployment frontend-deployment -n ${NAMESPACE} || true
            '''
          }
        }
      }
    }
  }
}
